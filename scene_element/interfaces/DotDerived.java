package hw_7.scene_element.interfaces;
/*
*Marker interface for instances that may have main point (ray, line, central shapes)
**/
public interface DotDerived extends Vector{
    //Викладач говорив що довгі ланцюги наслідувань роблять більше шкоди ніж користі, але конкретно тут я бачу сенс зробити клас DotDerived який би наслідувався від Шейп, бо в платонових тілах, поворотно-симетричних фігурах практично ідентичний код, а їх можна створити дуже багато (наприклад зірки з різною кількістю вершин)

    //private void setRadius(double newRadius); // Якщо є кілька вийнятків серед усіх можливих типів (пряма, промінь і точка), як для них правильно сховати такий метод?
    //Чи правильно все реалізувати і попередити коричтувача що в цьому нема сенсу?
    //Чи правильно побудувати складнішу ієрархії інтерфейсів і ці 3 типи (пряма, промінь і точка) винести в окремий інтерфейс?
    //Я цю ситуацію бачу як можливість оптимізації з одного боку часу написання програми, а з іншого - економію ресурсів для виконання програми
    //Оскільки це графічний редактор, я вважаю що для практичного використання користувачеві не доведеться робити стільки точок щоб це почало впливати на память суттєво
}
